/* This code is a part of MagicCap which is a MPL-2.0 licensed project.
 * Copyright (C) Matt Cowley (MattIPv4) <me@mattcowley.co.uk> 2019.
 */
const magicImports = require("magicimports")
const { app, systemPreferences } = magicImports("electron")
const fs = require("fs")
const sys = systemPreferences
const Color = require("color")

// Verify macOS
if (process.platform !== "darwin") {
    console.error("Colors will only be built on macOS")
    app.quit()
}

/*
 * Lightens a provided color
 * @param {string} color - The color to be lightened
 * @param {int} percent - The percentage to lighten the color by
 * @returns {string} color - The new color
 */
const lighten = (color, percent) => Color(color)
    .lighten(percent / 100)
    .rgb()
    .string(4)

/*
 * Sets the opacity of a given color
 * @param {string} color - The color to be alpha-ed
 * @param {int} percent - The percentage to alpha the color by
 * @returns {string} color - The new color
 */
const alpha = (color, percent) => Color(color)
    .fade(1 - (percent / 100))
    .rgb()
    .string(4)

/*
 * Generates the color variables for the given theme
 * @param {boolean} dark - If the theme should be dark mode
 */
const generate = dark => {
    // Set the system theme
    sys.setAppLevelAppearance(dark ? "dark" : "light")

    // Set the bulmaswatch theme to use
    const swatch = dark ? "darkly" : "default"

    // Generate the CSS vars
    const vars = `
    --red: ${sys.getSystemColor("red")}; /* Primary/Info button */
    --green: ${sys.getSystemColor("green")}; /* Success button */
    --blue: ${sys.getSystemColor("blue")}; /* Danger button */
    --orange: ${sys.getSystemColor("orange")}; /* Warning button */
    --gray: ${sys.getSystemColor("gray")}; /* Default button */
    
    --separator: ${alpha(sys.getColor("separator"), 10)};
    --grid: ${alpha(sys.getColor("grid"), 10)};
    --link: ${sys.getColor("link")};
    --text: ${sys.getColor("text")};
    
    --window-background: ${sys.getColor("window-background")}; /* Main background */
    --control-background: ${sys.getColor("control-background")}; /* Sidebar background */
    --control-active-background: ${lighten(sys.getColor("control-background"), 85)}; /* Sidebar item hover/active */

    --scroll: ${alpha(sys.getColor("tertiary-label"), 25)}; /* Scroll thumb */
    --scroll-active: ${alpha(sys.getColor("secondary-label"), 55)}; /* Scroll thumb hover/active */
    --scroll-background: ${sys.getColor("control-background")}; /* Scroll background */
`

    // Create new theme
    let theme = fs.readFileSync(`${__dirname}/theme.tpl.css`, "utf8")
    theme = theme.replace("{{SWATCH}}", swatch).replace("/*{{VARS}}*/", vars)
    theme = `/*\n * WARNING: THIS FILE IS AUTOMATICALLY GENERATED BY colors.js FROM theme.tpl.css\n */\n${theme}`

    // Write
    const file = `${__dirname}/${dark ? "dark" : "light"}.css`
    fs.writeFileSync(file, theme)
    console.info(`Theme written to ${file}`)
}

// Generate the dark first
generate(true)

// Done
app.quit()
